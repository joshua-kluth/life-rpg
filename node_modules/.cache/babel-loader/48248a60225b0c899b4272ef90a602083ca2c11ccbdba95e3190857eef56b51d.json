{"ast":null,"code":"// levelCalculations.js - Handle all XP and level calculations\n\nimport { XP_TABLE, DECAY_CONFIG } from './gameData.js';\n\n// Calculate level from XP\nexport const calculateLevel = xp => {\n  if (xp <= 0) return 1;\n  for (let level = 1; level < XP_TABLE.length; level++) {\n    if (xp < XP_TABLE[level]) {\n      return level;\n    }\n  }\n  return XP_TABLE.length; // Max level\n};\n\n// Calculate XP needed for next level\nexport const getXPForNextLevel = currentXP => {\n  const currentLevel = calculateLevel(currentXP);\n  if (currentLevel >= XP_TABLE.length) return 0; // Max level reached\n\n  return XP_TABLE[currentLevel] - currentXP;\n};\n\n// Calculate progress percentage to next level\nexport const getLevelProgress = currentXP => {\n  const currentLevel = calculateLevel(currentXP);\n  if (currentLevel >= XP_TABLE.length) return 100; // Max level\n\n  const prevLevelXP = currentLevel > 1 ? XP_TABLE[currentLevel - 1] : 0;\n  const nextLevelXP = XP_TABLE[currentLevel];\n  const progressXP = currentXP - prevLevelXP;\n  const levelRangeXP = nextLevelXP - prevLevelXP;\n  return Math.floor(progressXP / levelRangeXP * 100);\n};\n\n// Calculate overall level from total XP\nexport const calculateOverallLevel = totalXP => {\n  return calculateLevel(totalXP);\n};\n\n// Apply decay to stats based on last activity time\nexport const applyDecay = stats => {\n  const now = Date.now();\n  const updatedStats = {\n    ...stats\n  };\n  Object.keys(updatedStats).forEach(category => {\n    const stat = updatedStats[category];\n    const daysSinceLastActivity = (now - stat.lastActivity) / (1000 * 60 * 60 * 24);\n    if (daysSinceLastActivity > DECAY_CONFIG.startDecayAfterDays) {\n      const decayDays = daysSinceLastActivity - DECAY_CONFIG.startDecayAfterDays;\n      const decayAmount = Math.floor(stat.xp * (DECAY_CONFIG.decayPercentPerDay / 100) * decayDays);\n\n      // Apply decay but don't go below minimum level XP\n      const minimumXP = XP_TABLE[DECAY_CONFIG.minimumLevel - 1] || 0;\n      updatedStats[category] = {\n        ...stat,\n        xp: Math.max(stat.xp - decayAmount, minimumXP),\n        level: calculateLevel(Math.max(stat.xp - decayAmount, minimumXP))\n      };\n    }\n  });\n  return updatedStats;\n};\n\n// Get the category with highest level\nexport const getHighestStatCategory = stats => {\n  let highest = {\n    category: 'Exercise',\n    level: 0\n  };\n  Object.entries(stats).forEach(([category, stat]) => {\n    if (stat.level > highest.level) {\n      highest = {\n        category,\n        level: stat.level\n      };\n    }\n  });\n  return highest.category;\n};","map":{"version":3,"names":["XP_TABLE","DECAY_CONFIG","calculateLevel","xp","level","length","getXPForNextLevel","currentXP","currentLevel","getLevelProgress","prevLevelXP","nextLevelXP","progressXP","levelRangeXP","Math","floor","calculateOverallLevel","totalXP","applyDecay","stats","now","Date","updatedStats","Object","keys","forEach","category","stat","daysSinceLastActivity","lastActivity","startDecayAfterDays","decayDays","decayAmount","decayPercentPerDay","minimumXP","minimumLevel","max","getHighestStatCategory","highest","entries"],"sources":["C:/Users/joshb/Desktop/life-rpg-repository/life-rpg/src/data/levelCalculations.js"],"sourcesContent":["// levelCalculations.js - Handle all XP and level calculations\r\n\r\nimport { XP_TABLE, DECAY_CONFIG } from './gameData.js';\r\n\r\n// Calculate level from XP\r\nexport const calculateLevel = (xp) => {\r\n  if (xp <= 0) return 1;\r\n  \r\n  for (let level = 1; level < XP_TABLE.length; level++) {\r\n    if (xp < XP_TABLE[level]) {\r\n      return level;\r\n    }\r\n  }\r\n  return XP_TABLE.length; // Max level\r\n};\r\n\r\n// Calculate XP needed for next level\r\nexport const getXPForNextLevel = (currentXP) => {\r\n  const currentLevel = calculateLevel(currentXP);\r\n  if (currentLevel >= XP_TABLE.length) return 0; // Max level reached\r\n  \r\n  return XP_TABLE[currentLevel] - currentXP;\r\n};\r\n\r\n// Calculate progress percentage to next level\r\nexport const getLevelProgress = (currentXP) => {\r\n  const currentLevel = calculateLevel(currentXP);\r\n  if (currentLevel >= XP_TABLE.length) return 100; // Max level\r\n  \r\n  const prevLevelXP = currentLevel > 1 ? XP_TABLE[currentLevel - 1] : 0;\r\n  const nextLevelXP = XP_TABLE[currentLevel];\r\n  const progressXP = currentXP - prevLevelXP;\r\n  const levelRangeXP = nextLevelXP - prevLevelXP;\r\n  \r\n  return Math.floor((progressXP / levelRangeXP) * 100);\r\n};\r\n\r\n// Calculate overall level from total XP\r\nexport const calculateOverallLevel = (totalXP) => {\r\n  return calculateLevel(totalXP);\r\n};\r\n\r\n// Apply decay to stats based on last activity time\r\nexport const applyDecay = (stats) => {\r\n  const now = Date.now();\r\n  const updatedStats = { ...stats };\r\n  \r\n  Object.keys(updatedStats).forEach(category => {\r\n    const stat = updatedStats[category];\r\n    const daysSinceLastActivity = (now - stat.lastActivity) / (1000 * 60 * 60 * 24);\r\n    \r\n    if (daysSinceLastActivity > DECAY_CONFIG.startDecayAfterDays) {\r\n      const decayDays = daysSinceLastActivity - DECAY_CONFIG.startDecayAfterDays;\r\n      const decayAmount = Math.floor(stat.xp * (DECAY_CONFIG.decayPercentPerDay / 100) * decayDays);\r\n      \r\n      // Apply decay but don't go below minimum level XP\r\n      const minimumXP = XP_TABLE[DECAY_CONFIG.minimumLevel - 1] || 0;\r\n      updatedStats[category] = {\r\n        ...stat,\r\n        xp: Math.max(stat.xp - decayAmount, minimumXP),\r\n        level: calculateLevel(Math.max(stat.xp - decayAmount, minimumXP))\r\n      };\r\n    }\r\n  });\r\n  \r\n  return updatedStats;\r\n};\r\n\r\n// Get the category with highest level\r\nexport const getHighestStatCategory = (stats) => {\r\n  let highest = { category: 'Exercise', level: 0 };\r\n  \r\n  Object.entries(stats).forEach(([category, stat]) => {\r\n    if (stat.level > highest.level) {\r\n      highest = { category, level: stat.level };\r\n    }\r\n  });\r\n  \r\n  return highest.category;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}