{"ast":null,"code":"// userDataManager.js - Handle saving/loading user data and state management\n\nimport { CATEGORIES } from './gameData.js';\nimport { calculateLevel, calculateOverallLevel, applyDecay } from './levelCalculations.js';\nconst STORAGE_KEY = 'gamify-life-data';\n\n// Default user data structure\nconst createDefaultUserData = () => {\n  const stats = {};\n  CATEGORIES.forEach(category => {\n    stats[category] = {\n      xp: 0,\n      level: 1,\n      lastActivity: Date.now()\n    };\n  });\n  return {\n    totalXP: 0,\n    overallLevel: 1,\n    stats,\n    activities: [],\n    createdAt: Date.now(),\n    lastUpdated: Date.now()\n  };\n};\n\n// Load user data from localStorage\nexport const loadUserData = () => {\n  try {\n    const saved = localStorage.getItem(STORAGE_KEY);\n    if (!saved) {\n      return createDefaultUserData();\n    }\n    const userData = JSON.parse(saved);\n\n    // Apply decay when loading (simulates time passing)\n    const decayedStats = applyDecay(userData.stats);\n    const totalXP = Object.values(decayedStats).reduce((sum, stat) => sum + stat.xp, 0);\n    return {\n      ...userData,\n      stats: decayedStats,\n      totalXP,\n      overallLevel: calculateOverallLevel(totalXP)\n    };\n  } catch (error) {\n    console.error('Error loading user data:', error);\n    return createDefaultUserData();\n  }\n};\n\n// Save user data to localStorage\nexport const saveUserData = userData => {\n  try {\n    const dataToSave = {\n      ...userData,\n      lastUpdated: Date.now()\n    };\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(dataToSave));\n    return true;\n  } catch (error) {\n    console.error('Error saving user data:', error);\n    return false;\n  }\n};\n\n// Add a new activity and update stats\nexport const addActivity = (userData, category, activityName, xpValue) => {\n  const timestamp = Date.now();\n\n  // Create new activity entry\n  const newActivity = {\n    id: Date.now(),\n    // Simple ID generation\n    category,\n    activity: activityName,\n    xp: xpValue,\n    timestamp\n  };\n\n  // Update category stats\n  const currentCategoryStats = userData.stats[category];\n  const newXP = currentCategoryStats.xp + xpValue;\n  const newLevel = calculateLevel(newXP);\n  const updatedStats = {\n    ...userData.stats,\n    [category]: {\n      xp: newXP,\n      level: newLevel,\n      lastActivity: timestamp\n    }\n  };\n\n  // Calculate new totals\n  const totalXP = Object.values(updatedStats).reduce((sum, stat) => sum + stat.xp, 0);\n  const overallLevel = calculateOverallLevel(totalXP);\n\n  // Create updated user data\n  const updatedUserData = {\n    ...userData,\n    stats: updatedStats,\n    totalXP,\n    overallLevel,\n    activities: [newActivity, ...userData.activities].slice(0, 50) // Keep last 50 activities\n  };\n\n  // Save automatically\n  saveUserData(updatedUserData);\n  return updatedUserData;\n};\n\n// Reset all data (useful for testing)\nexport const resetUserData = () => {\n  const newData = createDefaultUserData();\n  saveUserData(newData);\n  return newData;\n};\n\n// Get recent activities (last N activities)\nexport const getRecentActivities = (userData, limit = 10) => {\n  return userData.activities.slice(0, limit);\n};","map":{"version":3,"names":["CATEGORIES","calculateLevel","calculateOverallLevel","applyDecay","STORAGE_KEY","createDefaultUserData","stats","forEach","category","xp","level","lastActivity","Date","now","totalXP","overallLevel","activities","createdAt","lastUpdated","loadUserData","saved","localStorage","getItem","userData","JSON","parse","decayedStats","Object","values","reduce","sum","stat","error","console","saveUserData","dataToSave","setItem","stringify","addActivity","activityName","xpValue","timestamp","newActivity","id","activity","currentCategoryStats","newXP","newLevel","updatedStats","updatedUserData","slice","resetUserData","newData","getRecentActivities","limit"],"sources":["C:/Users/joshb/Desktop/life-rpg-repository/life-rpg/src/data/userDataManager.js"],"sourcesContent":["// userDataManager.js - Handle saving/loading user data and state management\r\n\r\nimport { CATEGORIES } from './gameData.js';\r\nimport { calculateLevel, calculateOverallLevel, applyDecay } from './levelCalculations.js';\r\n\r\nconst STORAGE_KEY = 'gamify-life-data';\r\n\r\n// Default user data structure\r\nconst createDefaultUserData = () => {\r\n  const stats = {};\r\n  CATEGORIES.forEach(category => {\r\n    stats[category] = {\r\n      xp: 0,\r\n      level: 1,\r\n      lastActivity: Date.now()\r\n    };\r\n  });\r\n\r\n  return {\r\n    totalXP: 0,\r\n    overallLevel: 1,\r\n    stats,\r\n    activities: [],\r\n    createdAt: Date.now(),\r\n    lastUpdated: Date.now()\r\n  };\r\n};\r\n\r\n// Load user data from localStorage\r\nexport const loadUserData = () => {\r\n  try {\r\n    const saved = localStorage.getItem(STORAGE_KEY);\r\n    if (!saved) {\r\n      return createDefaultUserData();\r\n    }\r\n    \r\n    const userData = JSON.parse(saved);\r\n    \r\n    // Apply decay when loading (simulates time passing)\r\n    const decayedStats = applyDecay(userData.stats);\r\n    const totalXP = Object.values(decayedStats).reduce((sum, stat) => sum + stat.xp, 0);\r\n    \r\n    return {\r\n      ...userData,\r\n      stats: decayedStats,\r\n      totalXP,\r\n      overallLevel: calculateOverallLevel(totalXP)\r\n    };\r\n  } catch (error) {\r\n    console.error('Error loading user data:', error);\r\n    return createDefaultUserData();\r\n  }\r\n};\r\n\r\n// Save user data to localStorage\r\nexport const saveUserData = (userData) => {\r\n  try {\r\n    const dataToSave = {\r\n      ...userData,\r\n      lastUpdated: Date.now()\r\n    };\r\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(dataToSave));\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error saving user data:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Add a new activity and update stats\r\nexport const addActivity = (userData, category, activityName, xpValue) => {\r\n  const timestamp = Date.now();\r\n  \r\n  // Create new activity entry\r\n  const newActivity = {\r\n    id: Date.now(), // Simple ID generation\r\n    category,\r\n    activity: activityName,\r\n    xp: xpValue,\r\n    timestamp\r\n  };\r\n\r\n  // Update category stats\r\n  const currentCategoryStats = userData.stats[category];\r\n  const newXP = currentCategoryStats.xp + xpValue;\r\n  const newLevel = calculateLevel(newXP);\r\n\r\n  const updatedStats = {\r\n    ...userData.stats,\r\n    [category]: {\r\n      xp: newXP,\r\n      level: newLevel,\r\n      lastActivity: timestamp\r\n    }\r\n  };\r\n\r\n  // Calculate new totals\r\n  const totalXP = Object.values(updatedStats).reduce((sum, stat) => sum + stat.xp, 0);\r\n  const overallLevel = calculateOverallLevel(totalXP);\r\n\r\n  // Create updated user data\r\n  const updatedUserData = {\r\n    ...userData,\r\n    stats: updatedStats,\r\n    totalXP,\r\n    overallLevel,\r\n    activities: [newActivity, ...userData.activities].slice(0, 50) // Keep last 50 activities\r\n  };\r\n\r\n  // Save automatically\r\n  saveUserData(updatedUserData);\r\n  \r\n  return updatedUserData;\r\n};\r\n\r\n// Reset all data (useful for testing)\r\nexport const resetUserData = () => {\r\n  const newData = createDefaultUserData();\r\n  saveUserData(newData);\r\n  return newData;\r\n};\r\n\r\n// Get recent activities (last N activities)\r\nexport const getRecentActivities = (userData, limit = 10) => {\r\n  return userData.activities.slice(0, limit);\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}